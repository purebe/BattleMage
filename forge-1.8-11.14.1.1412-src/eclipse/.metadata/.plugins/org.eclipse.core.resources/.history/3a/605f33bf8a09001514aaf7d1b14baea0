package purebe.battlemage.magic;

import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Arrays;
import java.util.List;

import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.util.BlockPos;
import net.minecraft.util.ResourceLocation;
import purebe.battlemage.magic.SpellCaster.SpellName;
import purebe.battlemage.magic.SpellCaster.SpellSymbol;

public class IlluminateSpell extends Spell {
	final static int MAX_SIZE = 12;
	
	final EntityPlayer player;
	
	public IlluminateSpell(ResourceLocation icon) {
		player = null;
		this.icon = icon;
	}
	
	public IlluminateSpell(EntityPlayer player) {
		this.player = player;
		this.intensity = 1;
	}

	@Override
	public void cast() {
		System.out.println("You cast Illuminate!");
		
		BlockPos min = player.getPosition().add(-32, -16, -32);
		BlockPos max = player.getPosition().add(32, 16, 32);
		
		PrintWriter writer = null;
		try {
			writer = new PrintWriter("world_data.txt", "UTF-8");
			
			for (int y = 0; y < 32; ++y) {
				for (int x = 0; x < 64; ++x) {
					for (int z = 0; z < 64; ++z) {
						writer.println("");
					}
				}
			}
			
			
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		finally{
			if (writer != null) {
				writer.close();
			}
		}
		
		/*int count = 0;
		Queue<BlockPos> storage = new LinkedList<BlockPos>();
		BlockPos checkPos = player.getPosition().add(0, 1, 0);
		storage.add(checkPos);
		
		while (!storage.isEmpty()) {
			if (count >= MAX_SIZE) {
				break;
			}
			checkPos = storage.remove();
			if (player.worldObj.getBlockState(checkPos).getBlock() == Blocks.air) {
				System.out.println(checkPos);
				if (player.getRNG().nextInt(10) == 0) {
					++count;
					player.worldObj.setBlockState(checkPos, BattleMageBlocks.illuminatedAir.getDefaultState());
				}
				Vectors.Enqueue2DDirections(storage, checkPos);
			}
		}*/
	}

	@Override
	public List<SpellSymbol> getIncantation() {
		return Arrays.asList(SpellSymbol.White, SpellSymbol.Nature, SpellSymbol.Chaos);
	}

	@Override
	public SpellName getName() {
		return SpellName.Illuminate;
	}
}
